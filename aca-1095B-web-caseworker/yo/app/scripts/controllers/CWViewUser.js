/**
 * Created by pchavan on 10/15/2015.
 */
'use strict';

(function () {

  function CWViewUser ($scope, $state, $log, CWService, confirmationDialog, $timeout, $interval){

    $scope.serviceConstants = CWService.constants;

    /** Screen Labels **/
    $scope.label = {
      titleAction : "View",
      titleDescription : "1095-B Form",
      name: "Name",
      dob: "DOB",
      ssn: "SSN",
      tin: "TIN",
      year: "Year",
      email: "Email",
      primary: "Primary",
      dependents: "Dependents",
      noSsnTin: "No SSN / TIN available",
      lastMailed : "Last Mailed",
      mailRequested: "Mail Requested",
      mailProcessing: "Mail Processed",
      lastModified : "Last Modified",
      status: "Status",
      formActions : "Form Actions",
      address: "Address",
      generatedBy: "Generated By",
      comments: "Comments",
      historicForms : "Historic Forms",
      genDate : "Generated Date",
      city: "City",
      state: "State",
      zipCode: "Zipcode",
      viewPdfBtn : "View PDF",
      noPreviewAvailable : "No Preview Available",
      sendMailBtn: "Send my 1095-B by mail",
      returned: "Returned:",
      returnedAddress: "Address Invalid"
    };

    /** Send by mail **/
    $scope.sendMailMsg = {
      "successLabel" : "Your 1095-B form has been successfully processed to be sent by mail.",
      "errorLabel": "Error in mailing request."
    };

    $scope.sendMailSuccess = false;
    $scope.sendMailFail = false;

    $scope.dataLoad = false;

    $scope.ariaCompliantDate = function (dateRevd) {
      var dateObj = new Date(dateRevd);
      var dateLabel = {
        month: "January", year: "2016", date: "9"
      };
      switch (dateObj.getMonth()) {
        case 0 :
          dateLabel.month = "January";
          break;
        case 1 :
          dateLabel.month = "February";
          break;
        case 2 :
          dateLabel.month = "March";
          break;
        case 3 :
          dateLabel.month = "April";
          break;
        case 4 :
          dateLabel.month = "May";
          break;
        case 5 :
          dateLabel.month = "June";
          break;
        case 6 :
          dateLabel.month = "July";
          break;
        case 7 :
          dateLabel.month = "August";
          break;
        case 8 :
          dateLabel.month = "September";
          break;
        case 9 :
          dateLabel.month = "October";
          break;
        case 10 :
          dateLabel.month = "November";
          break;
        case 11 :
          dateLabel.month = "December";
          break;
        default :
          dateLabel.month = "January";
      }

      dateLabel.date = dateObj.getDate() + "";
      dateLabel.year = dateObj.getFullYear() + "";

      return dateLabel.month + " " + dateLabel.date + " " + dateLabel.year;
    };

    $scope.setAriaLabel = function(){
      /** Aria Label **/
      var individualLabel = $scope.viewData.coveredFilers.length > 1 ? "individuals" : "individual";
      $scope.currentFormIndex = $scope.viewData.coveredFilers.length + 2;
      var aria_mail = {
        mailLabel : "", mailDate : $scope.viewData.currentForm.printDate
      };
      switch ($scope.viewData.currentForm.printStatus) {
        case  $scope.serviceConstants.readyToMail :
          aria_mail = {
            mailLabel : "The mailed copy of the current form was requested on", mailDate : $scope.ariaCompliantDate($scope.viewData.currentForm.updatedDate)
          };
          break;
        case  $scope.serviceConstants.mailPending :
          aria_mail = {
            mailLabel : "The mailed copy of the current form was processed on", mailDate : $scope.ariaCompliantDate($scope.viewData.currentForm.lastMailRequestedDate)
          };
          break;
        case  $scope.serviceConstants.mailComplete :
          aria_mail = {
            mailLabel : "The mail has been sent to the citizen on", mailDate : $scope.ariaCompliantDate($scope.viewData.currentForm.printDate)
          };
          break;
        default :
          aria_mail = {
            mailLabel : "The mail has been sent to the citizen on", mailDate :  $scope.ariaCompliantDate($scope.viewData.currentForm.printDate)
          };
          break;
      }
      $scope.ariaLabel = {
        title : "You are currently viewing ten 95 B record for the following" + individualLabel,
        individual : [],
        currentForm : aria_mail.mailLabel + aria_mail.mailDate +
        ". The address on the record is " + $scope.viewData.currentForm.addressLine1 +", " + $scope.viewData.currentForm.addressLine2 +
        $scope.viewData.currentForm.city + $scope.viewData.currentForm.state + $scope.viewData.currentForm.zipcode +
        ". The current form was generated by " + $scope.viewData.currentForm.generatedBy +
        ". The following comments were entered" + $scope.viewData.currentForm.comments,
        viewForm: "Press Enter to the view the form",
        mailForm: "Press enter to Mail the 1095-b Form",
        historicForms : "Press tab to go through the historic versions of the form",
        viewHistoricForm : []
      };
      for(var i=0; i < $scope.viewData.coveredFilers.length; i++){
        $scope.ariaLabel.individual.push("Filer name: " + $scope.viewData.coveredFilers[i].firstName + $scope.viewData.coveredFilers[i].lastName +
          "Date of birth on record " + $scope.ariaCompliantDate($scope.viewData.coveredFilers[i].dob) +
          ". Last four digits of " + $scope.viewData.coveredFilers[i].uidType +  $scope.viewData.coveredFilers[i].uidNumber.substr( $scope.viewData.coveredFilers[i].uidNumber.length - 4) +
          ". Last record modification date is " + $scope.ariaCompliantDate($scope.viewData.coveredFilers[i].lastModifiedDate) + ". Press enter to access more details about the filer."
        );
      }

      $scope.popoverDetail = {
        mailDisabledAddrInvalid: "Mail action is disabled because the previously mailed form was returned. Please correct the address.",
        mailDisabledRegenerate: "Mail action is disabled because you have not generated a new form with your recipient data changes.",
        mailDisabledUnavailable: "Form is unavailable for this recipient. Requesting mail copy of this form is not possible.",
        pdfUnavailable : "Form is unavailable for this recipient",
        historicPdfUnavailable : "Form not generated for this version",
        template: "<div class='popover popoverShape' role='tooltip'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content popoverDisabledText'></div></div>",
        templateSmall: "<div class='popover popoverShapeSmall' role='tooltip'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content popoverDisabledText'></div></div>",
        templateConst: "<div class='popover popoverShapeConst' role='tooltip'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content popoverDisabledText'></div></div>"
      };
    };

    $scope.initController = function(){
      var formId = CWService.getFormIdforView();
      CWService.viewDetail(formId).success(function(data){
        $scope.viewData = data;
        $scope.dataLoad = true;

        var newTimer = $interval(function(){
          if($('.viewUserTitle').length){
            $('.viewUserTitle').focus();
            $interval.cancel(newTimer);
          }
        },2);

        $scope.setAriaLabel();
        var historicFormsTemp = angular.copy($scope.viewData.historicForms);
        historicFormsTemp.sort(function(a,b){
          var x = new Date(a.lastModifiedDate); var y = new Date(b.lastModifiedDate);
          return ((x > y) ? -1 : ((x < y) ? 1 : 0));
        });
        for(var i=0; i < historicFormsTemp.length; i++){
          $scope.ariaLabel.viewHistoricForm.push("Historic record" + (i+1) + "was last modified on " + $scope.ariaCompliantDate(historicFormsTemp[i].lastModifiedDate) +
            ". The address on the record was " + historicFormsTemp[i].addressLine1 +", " + historicFormsTemp[i].addressLine2 +
            historicFormsTemp[i].city + historicFormsTemp[i].state + historicFormsTemp[i].zipcode +
            ". The form was generated by " + historicFormsTemp[i].generatedBy +
            ". The following comments were entered" + historicFormsTemp[i].comments+ ". Press enter to access the PDF version of the form."
          );
        }
        /** Image description **/

        $scope.imgDesc = {
          viewSourceData : "Click to view/edit coverage source data",
          viewPdfForm: "Click to view the form",
          mailForm : "Click to send the form by mail"
        }


      });
    };

    $scope.initController();

    /** Functions **/
    $scope.sendByMailConfirm = function(currentForm){
      var modalAttribute = {
        windowClass: 'center-modal',
        animation: true,
        templateUrl: 'views/templates/confirmationDialog.html',
        label : {
          title: 'Mail 1095-B Form',
          noAction: 'No',
          yesAction: 'Proceed',
          description: 'Are you sure you want to mail the form?'
        },
        modalSize: 'small'
      };

      confirmationDialog.openModal(modalAttribute,  $scope.sendByMail, $scope.closeModal, $scope.closeModal);
      confirmationDialog.modalBox = true;
    };

    $scope.sendByMail = function(){
      /*$log.info("SendingMail");*/
      CWService.mailRequest($scope.viewData.currentForm.formID).success(function(data){
          if(data=== CWService.constants.readyToMail){
            $scope.sendMailSuccess = true;
            $scope.sendMailFail = false;
            $scope.viewData.currentForm.printStatus = data;
            $scope.setAriaLabel();
            $timeout(function () {
              $scope.sendMailSuccess = false;
            }, 5000);
          }
          else{
            $scope.sendMailSuccess = false;
            $scope.sendMailFail = true;
            $timeout(function () {
              $scope.sendMailFail = false;
            }, 5000);
          }
          confirmationDialog.modalBx.close();
          confirmationDialog.modalBox = false;
        }
      ).error(function(){
          $scope.sendMailSuccess = false;
          $scope.sendMailFail = true;
          $timeout(function () {
            $scope.sendMailFail = false;
          }, 5000);
          confirmationDialog.modalBx.close();
          confirmationDialog.modalBox = false;
      });
    };

    $scope.closeModal = function(){
      confirmationDialog.modalBx.close();
      confirmationDialog.modalBox = false;
      $scope.setAriaLabel();
      $timeout(function(){
        $('.currentFormTable').focus();
      }, 500);
    };

    $scope.pdfCautionDialog = function(){
      var modalAttribute = {
        windowClass: 'center-modal',
        animation: true,
        templateUrl: 'views/templates/cautionDialog.html',
        label : {
          title: 'Caution',
          noAction: 'Cancel',
          yesAction: 'Proceed',
          description: 'Information for the recipient has been updated. Please click on Proceed to view the recipient data and regenerate the pdf'
        },
        modalSize : 'large'
      };
      confirmationDialog.openModal(modalAttribute,  $scope.proceedOldPdf, $scope.closeModal, $scope.closeModal);
    };

    $scope.proceedOldPdf = function(){
      $scope.closeModal();
     /* $('.fa-file-pdf-o').blur();*/
      $scope.goToSourceData('sourceData', $scope.viewData.currentForm.formID);
    };

    $scope.viewDocuments = function(view, record){
      CWService.setCurrentData($scope.viewData.currentForm, $scope.viewData.coveredFilers[0]);
      $scope.currentFormView = CWService.getCurrentData();

      if (typeof $scope.currentFormView !== 'undefined') {
        $scope.dataLoad = true;

        if (view === 'viewPdf') {
          $scope.ariaLabel = {
            title: "You are viewing the most recent genereated PDF version of the form"
          };
          CWService.getCurrentDataPdf($scope.currentFormView.currentForm.formID)
            .then(function (data) {
              if (data.errorMessage === undefined ||
                data.errorMessage === null || data.errorMessage === '') {
                CWService.setFormData(data);
                CWService.setPreviousState('state.cw-view-user');
                $state.go('state.cw-view-form');
              } else {
                /** user not found **/
              }
            }, function () {
            });
        } else if (view === 'viewHistoric') {
          $scope.ariaLabel = {
            title: "You are viewing a historical version of the form"
          };
          CWService.getHistoricDataPdf(record.formID, record.auditSequenceNo)
            .then(function (data) {
              if (data.errorMessage === undefined ||
                data.errorMessage === null || data.errorMessage === '') {
                CWService.setFormData(data);
                CWService.setPreviousState('state.cw-view-user');
                $state.go('state.cw-view-form');
              } else {
                /** user not found **/
              }
            }, function () {
            });
        }

      }

    };

    $scope.$watch(function () {
      return confirmationDialog.modalBox
    }, function (newVal, oldVal) {
      if (typeof newVal !== 'undefined') {
        $scope.modalBox = confirmationDialog.modalBox;
      }
    });

    $scope.goToSourceData = function(view, formId){
      CWService.cViewSet(view, formId);
      $state.go('state.cw-view-source-data');//, {}, { location: false });
    };

    $scope.lastModifiedFormat = function(record){
        return new Date(record.lastModifiedDate);
    };

  }

  angular.module('aca1095BUiAppCW').controller('CWViewUser', ['$scope', '$state', '$log', 'CWService', 'confirmationDialog', '$timeout', '$interval',CWViewUser]);
}());
